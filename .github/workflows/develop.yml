name: CI/CD

on:
  pull_request:
    branches:
      - develop
  push:
    branches:
      - develop

env:
  GCP_PROJECT: secrets.GCP_PROJECT
  MYSQL_ROOT_PASSWORD: secrets.DEV_MYSQL_ROOT_PASSWORD
  MYSQL_USERNAME: secrets.DEV_MYSQL_USERNAME
  MYSQL_PASSWORD: secrets.DEV_MYSQL_PASSWORD
  MYSQL_DATABASE: secrets.DEV_MYSQL_DATABASE

jobs:
  # Test:
    # runs-on: ubuntu-latest
    # services:
    #   postgres:
    #     image: postgres:12
    #     env:
    #       POSTGRES_USER: postgres
    #       POSTGRES_PASSWORD: password
    #     ports: ['5432:5432']

    # steps:
      # - uses: actions/checkout@master

      # - name: Setup Ruby 2.7
      #   uses: ruby/setup-ruby@v1
      #   with:
      #     ruby-version: 2.7

      # - name: Setup Node 14
      #   uses: actions/setup-node@v1
      #   with:
      #     node-version: 14.x

      # - name: Get yarn cache
      #   id: yarn-cache
      #   run: echo "::set-output name=dir::$(yarn cache dir)"

      # - name: Cache yarn
      #   uses: actions/cache@v1
      #   with:
      #     path: ${{ steps.yarn-cache.outputs.dir }}
      #     key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-yarn-
      # - name: Cache gems
      #   uses: actions/cache@v1
      #   with:
      #     path: vendor/bundle
      #     key: ${{ runner.os }}-gem-${{ hashFiles('**/Gemfile.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-gem-
      # - name: Install dependencies
      #   run: |
      #     gem install bundler
      #     bundle config path vendor/bundle
      #     bundle install --jobs 4 --retry 3
      #     yarn install --frozen-lockfile
      # - name: Run tests
      #   env:
      #     DATABASE_URL: postgres://postgres:password@localhost:5432/test
      #     REDIS_URL: redis://localhost:6379/0
      #     RAILS_ENV: test
      #     RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
      #     PG_USER: postgres
      #   run: |
      #     bin/rails db:test:prepare
      #     bin/rails test
  deploy_develop:
    name: Deploy Develop to Google Cloud Platform
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo
        uses: actions/checkout@v2
        
      # Setup gcloud CLI
      - name: setup gcloud CLI
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
          # this is the json key of the service account created on the project
          service_account_key: ${{ secrets.GCP_CREDENTIALS }}  
          export_default_credentials: true
      - name: Deploy
        # To run kubectl commands against a cluster created in Cloud Console, 
        # from another computer, or by another member of the project, 
        # you need to generate a kubeconfig entry in your environment.
        # The rolling deployment is the standard default deployment to Kubernetes. 
        # It works by slowly, one by one, replacing pods of the previous version of 
        # your application with pods of the new version without any cluster downtime
        run: |
          gcloud config set compute/region us-central1
          gcloud config set compute/zone us-central1-c
          gcloud container clusters get-credentials ${{ secrets.GCP_PROJECT }}
        # envsubst < deploy.yml
          envsubst < /deploy/develop/develop-app-deployment.yaml | kubectl apply -f -
          envsubst < /deploy/develop/develop-mysql-config.yaml | kubectl apply -f -
          # for f in /deploy/develop/*.yaml; do envsubst < $f | kubectl apply -f -; done
          kubectl rollout restart deployment.apps/develop-app
          kubectl get all